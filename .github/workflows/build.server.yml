name: "CI: Server"
on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
      - main
    tags:
      - v*

env:
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
  GRADLE_CACHE_LOCAL: true
  GRADLE_CACHE_REMOTE: true
  GRADLE_CACHE_PUSH: true

jobs:
  validation:
    name: "Wrapper Check"
    runs-on: ubuntu-latest
    steps:
      - name: "Setup: Checkout"
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
      - name: "Check: Gradle Wrapper"
        uses: gradle/wrapper-validation-action@55e685c48d84285a5b0418cd094606e199cca3b6 # tag=v1

  check-deps:
    name: "Dependency Review"
    runs-on: ubuntu-latest
    steps:
      - name: "Setup: Checkout"
        uses: actions/checkout@v3
      - name: "Check: Dependency Review"
        uses: "actions/dependency-review-action@v3"
        continue-on-error: true
        with:
          config-file: "./.github/dependency-review-config.yml"
          license-check: true
          vulnerability-check: true
          fail-on-severity: "low"
          base-ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || 'v3' }}

  build:
    name: "Build: Server"
    runs-on: ubuntu-latest
    steps:
      - name: "Setup: Checkout"
        uses: actions/checkout@v2
      - name: "Setup: Cache"
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2/repository
          key: ${{ runner.os }}-gradle-test-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-test-
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          version: "latest"
          java-version: "19"
          components: "native-image"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup: Native Image"
        run: gu install native-image
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GOOGLE_SERVICE_KEY }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
      - name: "Setup: Google Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"
      - name: "Setup: Docker Auth"
        run: |
          gcloud config set project planetscale-ai
          gcloud auth configure-docker us-docker.pkg.dev
      - name: "Setup: Gradle"
        uses: gradle/gradle-build-action@v2
      - name: "Setup: Environment"
        env:
          GCLOUD_IMAGE_REPOSITORY: ${{ secrets.GCLOUD_IMAGE_REPOSITORY }}
          TESTCONTAINERS_RYUK_DISABLED: true
        run: |
          export DOCKER_IMAGE=`echo "${GCLOUD_GCR}/${GCLOUD_PROJECT_ID}/${GCLOUD_IMAGE_REPOSITORY}/planetscale-ai" | sed -e 's#//#/#' -e 's#^/##'`
      - name: "Build: Plugin Server"
        run: ./gradlew build check --no-daemon --scan
      - name: "Analyze: SARIF (Detekt)"
        uses: github/codeql-action/upload-sarif@7df0ce34898d659f95c0c4a09eaa8d4e32ee64db # v2
        continue-on-error: true
        if: success() || failure()
        with:
          sarif_file: build/reports/detekt/detekt.sarif
      - name: "Build: Docker Image (JVM)"
        run: ./gradlew jib --no-daemon --scan
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      - name: "Deploy: Cloud Run"
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          docker pull us-docker.pkg.dev/planetscale-ai/plugin/jvm:latest
          DOCKER_IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}" | grep planetscale-ai)
          DOCKER_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" "${DOCKER_IMAGE_REPOSITORY}" )
          gcloud run deploy plugin --quiet \
            --image "${DOCKER_IMAGE}" --project "${GCLOUD_PROJECT_ID}" \
            --region us-west1 --platform managed --allow-unauthenticated --format json
          echo "Invoke endpoint:"
          gcloud run services list --platform managed --format json | jq -r \
            '.[] | select(.metadata.name == "google-cloud-run-maven-test") | .status.address.url'
